"""
"<Paper Title>"
<Paper URL>

<Paper Abstract>

NOTE: Notes
"""
from lm_eval.base import Task, rf
from lm_eval.metrics import mean


_CITATION = """

"""

class NumericalReasoningBaseTask(Task):
    VERSION = 0
    DATASET_PATH = "lintang/numerical_reasoning"
    DATASET_NAME = None

    def has_training_docs(self):
        return False

    def has_validation_docs(self):
        return False

    def has_test_docs(self):
        return True

    def training_docs(self):
        return NotImplementedError

    def validation_docs(self):
        raise NotImplementedError

    def test_docs(self):
        return self.dataset["test"]

    def doc_to_text(self, doc):
        raise NotImplementedError

    def doc_to_target(self, doc):
        return "{y}".format(**doc)

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        # NOTE: The paper implements "verifiers" that assign a score to multiple
        # solutions and output the highest ranked solution.
        completion = rf.greedy_until(ctx, "\n")
        return completion

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        completion = results[0]
        gold = str(doc["y"])

        acc = 1.0 if completion == gold else 0.0

        return {"acc": acc}

    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metrics
        """
        return {"acc": mean}

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are
            whether a higher value of the submetric is better
        """
        return {"acc": True}


class ArithmeticMultiplication(NumericalReasoningBaseTask):

    DATASET_NAME = "multiplication"

    def doc_to_text(self, doc):
        return "Q: What is {x1} times {x2}? A:".format(**doc)


class ArithmeticAddition(NumericalReasoningBaseTask):

    DATASET_NAME = "addition"

    def doc_to_text(self, doc):
        return "Q: What is {x1} plus {x2}? A:".format(**doc)


class OperationInferenceMult(NumericalReasoningBaseTask):

    DATASET_NAME = "multiplication"

    def doc_to_text(self, doc):
        return "Q: What is {x1} # {x2}? A:".format(**doc)


class OperationInferenceAdd(NumericalReasoningBaseTask):

    DATASET_NAME = "addition"

    def doc_to_text(self, doc):
        return "Q: What is {x1} # {x2}? A:".format(**doc)


class TimeUnitInferenceMinSec(NumericalReasoningBaseTask):

    DATASET_NAME = "convert_min_sec"

    def doc_to_text(self, doc):
        return "Q: What is {x} {x_time_unit} in {y_time_unit}? A:".format(**doc)


class TimeUnitInferenceHourMin(NumericalReasoningBaseTask):

    DATASET_NAME = "convert_hour_min"

    def doc_to_text(self, doc):
        return "Q: What is {x} {x_time_unit} in {y_time_unit}? A:".format(**doc)


class TimeUnitInferenceDayHour(NumericalReasoningBaseTask):

    DATASET_NAME = "convert_day_hour"

    def doc_to_text(self, doc):
        return "Q: What is {x} {x_time_unit} in {y_time_unit}? A:".format(**doc)


class TimeUnitInferenceWeekDay(NumericalReasoningBaseTask):

    DATASET_NAME = "convert_week_day"

    def doc_to_text(self, doc):
        return "Q: What is {x} {x_time_unit} in {y_time_unit}? A:".format(**doc)


class TimeUnitInferenceMonthWeek(NumericalReasoningBaseTask):

    DATASET_NAME = "convert_month_week"

    def doc_to_text(self, doc):
        return "Q: What is {x} {x_time_unit} in {y_time_unit}? A:".format(**doc)


class TimeUnitInferenceYearMonth(NumericalReasoningBaseTask):

    DATASET_NAME = "convert_year_month"

    def doc_to_text(self, doc):
        return "Q: What is {x} {x_time_unit} in {y_time_unit}? A:".format(**doc)


class TimeUnitInferenceDecadeYear(NumericalReasoningBaseTask):

    DATASET_NAME = "convert_decade_year"

    def doc_to_text(self, doc):
        return "Q: What is {x} {x_time_unit} in {y_time_unit}? A:".format(**doc)
